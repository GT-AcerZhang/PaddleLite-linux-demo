cmake_minimum_required(VERSION 3.10)
set(CMAKE_SYSTEM_NAME Linux)
if(TARGET_ARCH_ABI STREQUAL "arm64")
    set(CMAKE_SYSTEM_PROCESSOR aarch64)
    set(CMAKE_C_COMPILER "aarch64-linux-gnu-gcc")
    set(CMAKE_CXX_COMPILER "aarch64-linux-gnu-g++")
elseif(TARGET_ARCH_ABI STREQUAL "armhf")
    set(CMAKE_SYSTEM_PROCESSOR arm)
    set(CMAKE_C_COMPILER "arm-linux-gnueabihf-gcc")
    set(CMAKE_CXX_COMPILER "arm-linux-gnueabihf-g++")
else()
    message(FATAL_ERROR "Unknown arch abi ${TARGET_ARCH_ABI}, only support arm64 and armhf.")
    return()
endif()

project(image_classification_demo)
message(STATUS "TARGET ARCH ABI: ${TARGET_ARCH_ABI}")
message(STATUS "PADDLE LITE DIR: ${PADDLE_LITE_DIR}")

option(USE_FULL_API "Use PaddleLite Full API" ON)

configure_file(demo_config.h.in demo_config.h)

if(USE_FULL_API)
  message(STATUS "Use PaddleLite Full API")
endif()

include_directories(${PADDLE_LITE_DIR}/${TARGET_ARCH_ABI}/include ${PROJECT_BINARY_DIR})
link_directories(${PADDLE_LITE_DIR}/${TARGET_ARCH_ABI}/lib)
#;${IMGNNA_DDK_ROOT}/lib)
#;${IMGDNN_DEPS}/lib)
add_definitions(-std=c++11 -g -pthread)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

if(TARGET_ARCH_ABI STREQUAL "arm64")
    set(CMAKE_CXX_FLAGS "-march=armv8-a -g ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-march=armv8-a -g ${CMAKE_C_FLAGS}")
elseif(TARGET_ARCH_ABI STREQUAL "armhf")
    set(CMAKE_CXX_FLAGS "-march=armv7-a -mfloat-abi=hard -mfpu=neon-vfpv4 ${CMAKE_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "-march=armv7-a -mfloat-abi=hard -mfpu=neon-vfpv4 ${CMAKE_C_FLAGS}" )
endif()

find_package(OpenMP REQUIRED)
if(OpenMP_FOUND OR OpenMP_CXX_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    message(STATUS "Found OpenMP ${OpenMP_VERSION} ${OpenMP_CXX_VERSION}")
    message(STATUS "OpenMP C flags:  ${OpenMP_C_FLAGS}")
    message(STATUS "OpenMP CXX flags:  ${OpenMP_CXX_FLAGS}")
    message(STATUS "OpenMP OpenMP_CXX_LIB_NAMES:  ${OpenMP_CXX_LIB_NAMES}")
    message(STATUS "OpenMP OpenMP_CXX_LIBRARIES:  ${OpenMP_CXX_LIBRARIES}")
else()
    message(FATAL_ERROR "Could not found OpenMP!")
    return()
endif()

add_executable(image_classification_demo image_classification_demo.cc)
#target_link_libraries(image_classification_demo paddle_light_api_shared imgdnn nnasession)
target_link_libraries(image_classification_demo paddle_full_api_shared imgdnn nnasession)
